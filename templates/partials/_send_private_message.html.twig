<div class="mx-5">
	<h5 class="text-primary">@
		{{user.username}}
	</h5>
	<div class="row">

		<div class="col">
			<ul
				class="list-unstyled">
				{# Render le chat #}
				<div
					class="card-body overflow-auto " id="chat-scroll" style="position: relative; height: 600px">

					{# chat utilisateur connecté #}
					{% for message in messages %}
						{% if message.sender == app.user.username %}

							<li class="d-flex justify-content-end mb-4">
								<img src="{{asset('images/pas_de_photo.png')}}" alt="avatar" class="rounded-circle d-flex align-self-start me-3 shadow-1-strong" width="60">
								<div class="card">
									<div class="card-header d-flex justify-content-between p-2 align-items-center">
										<p class="fw-bold mb-0">{{message.sender}}</p>&nbsp;&nbsp;
										<p class="text-muted small mb-0">
											<i class="far fa-clock"></i>
											&nbsp;&nbsp;{{message.createdAt|format_datetime('none', 'short', locale='fr') }}</p>
									</div>
									<div class="card-body">
										<p class="mb-0">
											{{message.content}}
										</p>
									</div>
								</div>
							</li>
							{% else %}
								<li class="d-flex justify-content-start mb-4">
									<img src="{{asset('images/pas_de_photo.png')}}" alt="avatar" class="rounded-circle d-flex align-self-start me-3 shadow-1-strong" width="60">
									<div class="card">
										<div class="card-header d-flex justify-content-between p-2 align-items-center">
											<p class="fw-bold mb-0">{{message.sender}}</p>&nbsp;&nbsp;
											<p class="text-muted small mb-0">
												<i class="far fa-clock"></i>
												&nbsp;&nbsp;{{message.createdAt|format_datetime('none', 'short', locale='fr') }}</p>
										</div>
										<div class="card-body">
											<p class="mb-0">
												{{message.content}}
											</p>
										</div>
									</div>
								</li>
						{% endif %}

					{% endfor %}

					{#<div id="message-received" {{ turbo_stream_listen(canal) }}></div>#}


					{#<div id="message-send" ></div>#}


					<div id="messages" class="" {{ turbo_stream_listen(canala)}}>

					</div>

				</div>
				<li
					class="bg-white mb-3">
					{# C'est le formulaire d'envoie de message à chaque post c'est juste cette partie et le turbo qui change la page ne change pas #}
					<turbo-frame id="message_form">
						{{ form_start(form) }}
						<div class="card-footer text-muted d-flex  align-items-center p-3">
							{{form_widget(form.message)}}
							<button class="btn btn-white" type="submit">
								<i class="fas fa-paper-plane fa-2x"></i>
							</button>
						</div>
						{{form_end(form)}}
					</turbo-frame>
				</li>

			</ul>

		</div>
	</div>
</div>

<script>
	const eventSource = new EventSource("{{ mercure(canal)|escape('js') }}");
	const username = {{ app.user.username|json_encode()|raw}};
	eventSource.onmessage = event => {

		/*// Will be called every time an update is published by the server
		const myObject = JSON.parse(event.data);
		console.log(myObject);
		const sender = document.getElementById('username');
		const li = document.getElementById('li');

		const messages = document.getElementById('messages');
		var br = document.createElement('br');


		messages.appendChild(br);

		if (username == myObject.sender){
			messages.className = 'd-flex flex-column justify-content-start w-25'
			console.log("right");
		}else {
			messages.className = 'd-flex flex-column justify-content-end w-25'
			console.log("left");
		}*/
		/*console.log(li.innerText);
		if(sender.innerText == username){
			li.className = 'd-flex justify-content-end ';
		}else {
			li.className = 'd-flex justify-content-start ';
		}*/

		/*if(document.getElementById('mess') != null){
			var mess = document.getElementById('mess');
		}else {
			var mess = document.getElementById(myObject.id-1);
		}
		var clone = mess.cloneNode(true);

		clone.id = myObject.id;

		if (username == myObject.sender){


			clone.style.cssFloat = 'right';

			console.log("right");
		}else {
			clone.style.cssFloat = 'left';
			clone.style.clear() ;
			/!*var send = document.getElementById('send');
			var rece = document.getElementById('mess');

			send.style.display = 'none'*!/
			console.log("left");
		}
		div.appendChild(clone);
*/

		// Get the chat container element
		/*const sender = document.getElementById('sender');
		const mess = document.getElementById('mess');
		sender.innerHTML = myObject.sender;
		mess.innerHTML = myObject.message;*/


		// Create a new chat message element
		/*const messageElement = document.createElement('p');

		// Set the message text and alignment

		if (myObject.sender === username) {
			messageElement.classList.add('text-success');
		} else {
			messageElement.classList.add('text-danger');
		}

		// Append the message element to the chat container
		chatContainer.appendChild(messageElement);
		console.log(chatContainer);*/
	}
</script>